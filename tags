!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AdjustiTopicInfo	src/MqttPackFormat.cpp	/^string CMqttPackFormat::AdjustiTopicInfo(string topic, const Json::Value &items)$/;"	f	class:CMqttPackFormat
AliPlat	include/AliPlatAuth.h	/^class AliPlat:public MultiPlatform$/;"	c
AssignFcsValueToVector	src/MqttPackFormat.cpp	/^void CMqttPackFormat::AssignFcsValueToVector(ITEM_FORMAT &getData, vector<FORMAT>::const_iterator& postData)$/;"	f	class:CMqttPackFormat
AssignServerValueToVector	src/MqttParseFormat.cpp	/^void CMqttFormatParse::AssignServerValueToVector(FORMAT &getData, const FORMAT &postData, const vector<ITEM_FORMAT>::const_iterator &itrTemp)$/;"	f	class:CMqttFormatParse
AssignVectorValueToMessage	src/MqttPackFormat.cpp	/^void CMqttPackFormat::AssignVectorValueToMessage(Json::Value &root, vector<ITEM_FORMAT>::const_iterator &itr)$/;"	f	class:CMqttPackFormat
AuthPlatform	src/AliPlatAuth.cpp	/^void AliPlat::AuthPlatform(MqttConfigInfoType &server_info, Json::Value &server_config)$/;"	f	class:AliPlat
AuthPlatform	src/HuaWeiPlatAuth.cpp	/^void HuaWeiPlat::AuthPlatform(MqttConfigInfoType &server_info, Json::Value &server_config)$/;"	f	class:HuaWeiPlat
AuthPlatform	src/MqttInitConfig.cpp	/^void MultiPlatform::AuthPlatform(MqttConfigInfoType &server_info, Json::Value &server_config)$/;"	f	class:MultiPlatform
AuthPlatform	src/OneNetPlatAuth.cpp	/^void OneNetPlat::AuthPlatform(MqttConfigInfoType &server_info, Json::Value &server_config)$/;"	f	class:OneNetPlat
BCBLACK	include/GlogInit.h	29;"	d
BCBLUE	include/GlogInit.h	33;"	d
BCCYAN	include/GlogInit.h	35;"	d
BCGREEN	include/GlogInit.h	31;"	d
BCMAGENTA	include/GlogInit.h	34;"	d
BCRED	include/GlogInit.h	30;"	d
BCWHITE	include/GlogInit.h	36;"	d
BCYELLOW	include/GlogInit.h	32;"	d
BLACK	include/GlogInit.h	13;"	d
BLUE	include/GlogInit.h	17;"	d
BOLDBLACK	include/GlogInit.h	21;"	d
BOLDBLUE	include/GlogInit.h	25;"	d
BOLDCYAN	include/GlogInit.h	27;"	d
BOLDGREEN	include/GlogInit.h	23;"	d
BOLDMAGENTA	include/GlogInit.h	26;"	d
BOLDRED	include/GlogInit.h	22;"	d
BOLDWHITE	include/GlogInit.h	28;"	d
BOLDYELLOW	include/GlogInit.h	24;"	d
BOOL_LABEL_FALSE	include/MqttParseFormat.h	/^	BOOL_LABEL_FALSE,                   \/**<The bool type need string label for false *\/$/;"	e	enum:ITEM_ATTRI_TYPE
BOOL_LABEL_TRUE	include/MqttParseFormat.h	/^	BOOL_LABEL_TRUE,                    \/**<The bool type need string label for true *\/$/;"	e	enum:ITEM_ATTRI_TYPE
Base64Decode	src/MqttPictureToBase64.cpp	/^bool PictureToBase64::Base64Decode(const string& input, string* output) {$/;"	f	class:PictureToBase64
Base64Encode	src/MqttPictureToBase64.cpp	/^bool PictureToBase64::Base64Encode(const string& input, string* output) {$/;"	f	class:PictureToBase64
CEncryptMethod	include/MqttEncryptData.h	/^class CEncryptMethod$/;"	c
CMqttFormatParse	include/MqttParseFormat.h	/^class CMqttFormatParse$/;"	c
CMqttFormatParse	src/MqttParseFormat.cpp	/^CMqttFormatParse::CMqttFormatParse()$/;"	f	class:CMqttFormatParse
CMqttMessageMap	include/MqttMessageMap.h	/^class CMqttMessageMap$/;"	c
CMqttMessageMap	src/MqttMessageMap.cpp	/^CMqttMessageMap::CMqttMessageMap()$/;"	f	class:CMqttMessageMap
CMqttPackFormat	include/MqttPackFormat.h	/^class CMqttPackFormat$/;"	c
CMqttPackFormat	src/MqttPackFormat.cpp	/^CMqttPackFormat::CMqttPackFormat()$/;"	f	class:CMqttPackFormat
CMqttService	include/MqttConnectServer.h	/^class CMqttService$/;"	c
CMqttService	src/MqttConnectServer.cpp	/^CMqttService::CMqttService()$/;"	f	class:CMqttService
COMBE_TYPE	include/MqttParseFormat.h	/^	COMBE_TYPE,                         \/**<The item combine eg: 'KV' or 'NV' *\/$/;"	e	enum:ITEM_ATTRI_TYPE
COneNetPlatAuth	include/OneNetPlatAuth.h	/^class COneNetPlatAuth$/;"	c
COneNetPlatAuth	src/OneNetPlatAuth.cpp	/^COneNetPlatAuth::COneNetPlatAuth()$/;"	f	class:COneNetPlatAuth
CYAN	include/GlogInit.h	19;"	d
CalcBase64DecodeLength	src/OneNetPlatAuth.cpp	/^int COneNetPlatAuth::CalcBase64DecodeLength(const char *b64txt, int len) $/;"	f	class:COneNetPlatAuth
CheckStorePath	src/MqttConnectServer.cpp	/^int CMqttService::CheckStorePath(const char *path)$/;"	f	class:CMqttService
CheckStringType	src/MqttPackFormat.cpp	/^string CMqttPackFormat::CheckStringType(vector<ITEM_FORMAT>::const_iterator itr)$/;"	f	class:CMqttPackFormat
CheckStringType	src/MqttParseFormat.cpp	/^const string CMqttFormatParse::CheckStringType(const FORMAT &postData, const vector<ITEM_FORMAT>::const_iterator &itr)$/;"	f	class:CMqttFormatParse
Connlost	src/MqttConnectServer.cpp	/^void CMqttService::Connlost(void *context, char *cause)$/;"	f	class:CMqttService
CreateMq	src/MQAdapter.cpp	/^bool MqAdapter::CreateMq() {$/;"	f	class:MqAdapter
DECIMAL_POINT	include/MqttParseFormat.h	/^	DECIMAL_POINT,                      \/**<The float items decimal bit> *\/$/;"	e	enum:ITEM_ATTRI_TYPE
DEFAULT_VALUE	include/MqttParseFormat.h	/^	DEFAULT_VALUE,                      \/**<The attri's default value from file> *\/$/;"	e	enum:ITEM_ATTRI_TYPE
DefalutValueAssign	src/MqttPackFormat.cpp	/^int CMqttPackFormat::DefalutValueAssign(ITEM_FORMAT &temp, string type, FORMAT value) $/;"	f	class:CMqttPackFormat
DefalutValueAssign	src/MqttParseFormat.cpp	/^int CMqttFormatParse::DefalutValueAssign(ITEM_FORMAT &temp, string type, FORMAT value) $/;"	f	class:CMqttFormatParse
DeleteMq	src/MQAdapter.cpp	/^bool MqAdapter::DeleteMq() {$/;"	f	class:MqAdapter
DoubleToString	src/MqttParseFormat.cpp	/^string CMqttFormatParse::DoubleToString(const double value, int precision)$/;"	f	class:CMqttFormatParse
ERROR	include/GlogInit.h	/^	ERROR = -1,$/;"	e	enum:ReturnInfo
FCS_TO_H212_NAME	include/MQAdapter.h	22;"	d
FCS_TO_MQTT_NAME	include/MQAdapter.h	20;"	d
FCS_TO_TCP_NAME	include/MQAdapter.h	18;"	d
FLOG_ERROR	include/GlogInit.h	/^	FLOG_ERROR = 2,$/;"	e	enum:SeverityLevel
FLOG_FATAL	include/GlogInit.h	/^	FLOG_FATAL = 3$/;"	e	enum:SeverityLevel
FLOG_INFO	include/GlogInit.h	/^	FLOG_INFO = 0,$/;"	e	enum:SeverityLevel
FLOG_WARNING	include/GlogInit.h	/^	FLOG_WARNING = 1,$/;"	e	enum:SeverityLevel
FORMAT	include/MqttParseFormat.h	/^class FORMAT$/;"	c
GET_PARAM	include/MqttGetFcsParam.h	/^	}GET_PARAM;$/;"	t	typeref:struct:_GET_PARAM
GREEN	include/GlogInit.h	15;"	d
GenerateAuthToken	src/OneNetPlatAuth.cpp	/^int COneNetPlatAuth::GenerateAuthToken(string device_key, string method, string version, string res, string et, string &token)$/;"	f	class:COneNetPlatAuth
GenerateTokenSign	src/OneNetPlatAuth.cpp	/^string COneNetPlatAuth::GenerateTokenSign(string StringForSignature, string device_key, string method) $/;"	f	class:COneNetPlatAuth
GetAliMethod	src/MqttPackFormat.cpp	/^string CMqttPackFormat::GetAliMethod(string topic)$/;"	f	class:CMqttPackFormat
GetCurrMsgNum	src/MQAdapter.cpp	/^long MqAdapter::GetCurrMsgNum()$/;"	f	class:MqAdapter
GetDeviceId	src/MqttPackFormat.cpp	/^string CMqttPackFormat::GetDeviceId(string topic)$/;"	f	class:CMqttPackFormat
GetFcsMessage	src/MqttPackFormat.cpp	/^int CMqttPackFormat::GetFcsMessage(const char *payload_str)$/;"	f	class:CMqttPackFormat
GetItemInfoToSet	src/MqttParseFormat.cpp	/^int CMqttFormatParse::GetItemInfoToSet(set<string> &storeItemId, const vector<ITEM_FORMAT>& storeObj)$/;"	f	class:CMqttFormatParse
GetMaxMsgNum	src/MQAdapter.cpp	/^long MqAdapter::GetMaxMsgNum()$/;"	f	class:MqAdapter
GetMd5	src/MqttEncryptData.cpp	/^int CEncryptMethod::GetMd5(std::string &str_md5, const char * const buffer, size_t buffer_size) $/;"	f	class:CEncryptMethod
GetMessageMap	src/MqttMessageMap.cpp	/^string CMqttMessageMap::GetMessageMap(int flexem_error_code)$/;"	f	class:CMqttMessageMap
GetMqAttr	src/MQAdapter.cpp	/^long MqAdapter::GetMqAttr(struct mq_attr &attr)$/;"	f	class:MqAdapter
GetMqFlags	src/MQAdapter.cpp	/^long MqAdapter::GetMqFlags()$/;"	f	class:MqAdapter
GetMqId	src/MQAdapter.cpp	/^mqd_t MqAdapter::GetMqId()$/;"	f	class:MqAdapter
GetMsgSize	src/MQAdapter.cpp	/^long MqAdapter::GetMsgSize()$/;"	f	class:MqAdapter
GetPictureBase64	src/MqttPackFormat.cpp	/^int CMqttPackFormat::GetPictureBase64(string &base64_str, string base64_picture_path)$/;"	f	class:CMqttPackFormat
GetPictureBase64	src/MqttPictureToBase64.cpp	/^string PictureToBase64::GetPictureBase64(const string &filename)$/;"	f	class:PictureToBase64
GetSHA1	src/MqttEncryptData.cpp	/^int CEncryptMethod::GetSHA1(std::string &str_sha1, const char * const buffer, size_t buffer_size)$/;"	f	class:CEncryptMethod
GetServerMessage	src/MqttParseFormat.cpp	/^void CMqttFormatParse::GetServerMessage(char *topic_name, MQTTAsync_message *message)$/;"	f	class:CMqttFormatParse
GetTimeStamp	src/MqttPackFormat.cpp	/^long CMqttPackFormat::GetTimeStamp(string &timestamp)$/;"	f	class:CMqttPackFormat
GlogInit	src/GlogInit.cpp	/^int32_t GlogInit(const char* tag, const char* log_dir, int32_t log_level)$/;"	f
GlogStop	src/GlogInit.cpp	/^int32_t GlogStop()$/;"	f
H212_TO_FCS_NAME	include/MQAdapter.h	21;"	d
HmacEncode	src/MqttEncryptData.cpp	/^int CEncryptMethod::HmacEncode(string method, string key, string data, string &encrypt_data) $/;"	f	class:CEncryptMethod
HuaWeiPlat	include/HuaWeiPlatAuth.h	/^class HuaWeiPlat:public MultiPlatform$/;"	c
ITEM_ATTRI_TYPE	include/MqttParseFormat.h	/^enum ITEM_ATTRI_TYPE$/;"	g
ITEM_FORMAT	include/MqttParseFormat.h	/^class ITEM_FORMAT$/;"	c
ITEM_ID	include/MqttParseFormat.h	/^	ITEM_ID,                            \/**<The item ID eg: '0x80000007' *\/$/;"	e	enum:ITEM_ATTRI_TYPE
IdentTopicInfo	src/MqttParseFormat.cpp	/^bool CMqttFormatParse::IdentTopicInfo(string topic_json, string topic_name) $/;"	f	class:CMqttFormatParse
InitConnectType	src/MqttConnectServer.cpp	/^void CMqttService::InitConnectType(char *ADDRESS)$/;"	f	class:CMqttService
InitFboxSN	src/MqttInitConfig.cpp	/^int MqttInitConfig::InitFboxSN(string SN)$/;"	f	class:MqttInitConfig
InitFcsParam	src/MqttStart.cpp	/^int InitFcsParam(void *p)$/;"	f
InitMessageMap	src/MqttMessageMap.cpp	/^int CMqttMessageMap::InitMessageMap()$/;"	f	class:CMqttMessageMap
InitMqttVersion	src/MqttConnectServer.cpp	/^void CMqttService::InitMqttVersion(MQTTAsync_connectOptions *conn_opts)$/;"	f	class:CMqttService
InitQueue	src/MqttParseFormat.cpp	/^int CMqttFormatParse::InitQueue()$/;"	f	class:CMqttFormatParse
InitSSLOpts	src/MqttConnectServer.cpp	/^void CMqttService::InitSSLOpts(MQTTAsync_SSLOptions *sslopts)$/;"	f	class:CMqttService
InitServerConfigFile	src/MqttInitConfig.cpp	/^int MqttInitConfig::InitServerConfigFile()$/;"	f	class:MqttInitConfig
InitServerConnect	src/MqttStart.cpp	/^int InitServerConnect()$/;"	f
InitStoreType	src/MqttConnectServer.cpp	/^void CMqttService::InitStoreType(char *cachPath, MQTTAsync_createOptions *create_opts)$/;"	f	class:CMqttService
InitTopicConfigInfo	src/MqttInitConfig.cpp	/^int MqttInitConfig::InitTopicConfigInfo()$/;"	f	class:MqttInitConfig
InitVersion	src/MqttStart.cpp	/^int InitVersion()$/;"	f
IsNewAttri	src/MqttPackFormat.cpp	/^int CMqttPackFormat::IsNewAttri(vector<ITEM_FORMAT> &storeData, vector<ITEM_FORMAT>::const_iterator &itrObj, const vector<FORMAT> &storePayload, const Json::Value &topic)$/;"	f	class:CMqttPackFormat
IsOpen	src/MQAdapter.cpp	/^bool MqAdapter::IsOpen()$/;"	f	class:MqAdapter
JSON_TYPE	include/MqttParseFormat.h	/^class JSON_TYPE$/;"	c
JudgeDataType	src/MqttParseFormat.cpp	/^int CMqttFormatParse::JudgeDataType(vector<ITEM_FORMAT>::const_iterator& itrObj,FORMAT &itrPay)$/;"	f	class:CMqttFormatParse
LOG_PRINT	include/MqttParseFormat.h	22;"	d
LOG_PRINT	include/MqttParseFormat.h	23;"	d
MAGENTA	include/GlogInit.h	18;"	d
MQADAPTER_H_	include/MQAdapter.h	6;"	d
MQTT_CACH_DATA_SAVA_SD	include/MqttInitConfig.h	27;"	d
MQTT_CACH_DATA_SAVA_TEMP	include/MqttInitConfig.h	26;"	d
MQTT_CACH_DATA_SAVA_USB	include/MqttInitConfig.h	28;"	d
MQTT_CONFIG_CA_CRT_FILE	include/MqttInitConfig.h	21;"	d
MQTT_CONFIG_CLIENT_CTR_FILE	include/MqttInitConfig.h	22;"	d
MQTT_CONFIG_CLIENT_KEY_FILE	include/MqttInitConfig.h	23;"	d
MQTT_CONNECT_CONFIG_FILE	src/MqttInitConfig.cpp	/^string MQTT_CONNECT_CONFIG_FILE;$/;"	v
MQTT_TOPIC_SUB_NUM	include/MqttInitConfig.h	19;"	d
MQTT_TO_FCS_NAME	include/MQAdapter.h	19;"	d
MQTT_VERSION_FILE	include/MqttInitConfig.h	24;"	d
MatchJsonType	src/MqttParseFormat.cpp	/^void CMqttFormatParse::MatchJsonType(FORMAT &get_type, Json::Value::const_iterator itr)$/;"	f	class:CMqttFormatParse
MergeFcsFormatData	src/MqttPackFormat.cpp	/^int CMqttPackFormat::MergeFcsFormatData(vector<ITEM_FORMAT> &storeData, const vector<ITEM_FORMAT> &storeObj, const vector<FORMAT> &storePayload,const Json::Value &topic)$/;"	f	class:CMqttPackFormat
MergeMqttFormatData	src/MqttParseFormat.cpp	/^int CMqttFormatParse::MergeMqttFormatData(vector<FORMAT>& storeData, const vector<ITEM_FORMAT>& storeObj, const vector<FORMAT>& storePayload)$/;"	f	class:CMqttFormatParse
ModifyTheFloatPrecision	src/MqttPackFormat.cpp	/^void CMqttPackFormat::ModifyTheFloatPrecision(const vector<ITEM_FORMAT>::const_iterator& itrObj, FORMAT &itrPay)$/;"	f	class:CMqttPackFormat
MqAdapter	include/MQAdapter.h	/^class MqAdapter {$/;"	c
MqAdapter	src/MQAdapter.cpp	/^MqAdapter::MqAdapter(string name, long msg_num, long msg_size)$/;"	f	class:MqAdapter
MqRecv	src/MQAdapter.cpp	/^long MqAdapter::MqRecv(char *msg, uint32_t &msg_prio) {$/;"	f	class:MqAdapter
MqSend	src/MQAdapter.cpp	/^bool MqAdapter::MqSend(char *msg, size_t len, uint32_t msg_prio)$/;"	f	class:MqAdapter
MqTraceCallback	src/MqttConnectServer.cpp	/^void CMqttService::MqTraceCallback(enum MQTTASYNC_TRACE_LEVELS level, char *message)$/;"	f	class:CMqttService
MqttConfigInfoType	include/MqttInitConfig.h	/^class MqttConfigInfoType$/;"	c
MqttInit	src/MqttConnectServer.cpp	/^int CMqttService::MqttInit()$/;"	f	class:CMqttService
MqttInitConfig	include/MqttInitConfig.h	/^class MqttInitConfig$/;"	c
MqttInitConfig	src/MqttInitConfig.cpp	/^MqttInitConfig::MqttInitConfig()$/;"	f	class:MqttInitConfig
MqttPackFormat	src/MqttParseFormat.cpp	/^static CMqttPackFormat MqttPackFormat;$/;"	v	file:
MqttStart	src/MqttStart.cpp	/^	void *MqttStart(void *p)$/;"	f
Msgarrvd	src/MqttConnectServer.cpp	/^int CMqttService::Msgarrvd(void *context, char *topicName, int topicLen, MQTTAsync_message *message)$/;"	f	class:CMqttService
MultiPlatform	include/MqttInitConfig.h	/^class MultiPlatform$/;"	c
OBJECT_TYPE	include/MqttParseFormat.h	/^	OBJECT_TYPE,                        \/**<The items type eg:"item" or "attri" *\/$/;"	e	enum:ITEM_ATTRI_TYPE
OnConnect	src/MqttConnectServer.cpp	/^void CMqttService::OnConnect(void *context, MQTTAsync_successData *response)$/;"	f	class:CMqttService
OnConnectFailure	src/MqttConnectServer.cpp	/^void CMqttService::OnConnectFailure(void *context, MQTTAsync_failureData* response)$/;"	f	class:CMqttService
OnLost	src/MqttConnectServer.cpp	/^void CMqttService::OnLost(void *context, MQTTAsync_failureData *response)$/;"	f	class:CMqttService
OnSend	src/MqttConnectServer.cpp	/^void CMqttService::OnSend(void *context, MQTTAsync_successData *response)$/;"	f	class:CMqttService
OnSubscribe	src/MqttConnectServer.cpp	/^void CMqttService::OnSubscribe(void *context, MQTTAsync_successData *response)$/;"	f	class:CMqttService
OnSubscribeFailure	src/MqttConnectServer.cpp	/^void CMqttService::OnSubscribeFailure(void *context, MQTTAsync_failureData *response)$/;"	f	class:CMqttService
OneNetPlat	include/OneNetPlatAuth.h	/^class OneNetPlat:public MultiPlatform$/;"	c
OnenetBase64Decode	src/OneNetPlatAuth.cpp	/^int COneNetPlatAuth::OnenetBase64Decode(char *input, int input_len, string &decrypted_device_access_key)$/;"	f	class:COneNetPlatAuth
OnenetBase64Encode	src/OneNetPlatAuth.cpp	/^int COneNetPlatAuth::OnenetBase64Encode(const unsigned char *input, int input_len, string &out)$/;"	f	class:COneNetPlatAuth
OnenetHmacEncode	src/OneNetPlatAuth.cpp	/^int COneNetPlatAuth::OnenetHmacEncode(const unsigned char *input, int input_len, const unsigned char *key, int key_len, unsigned char *output)$/;"	f	class:COneNetPlatAuth
OnetnetRulEncode	src/OneNetPlatAuth.cpp	/^void COneNetPlatAuth::OnetnetRulEncode(string &input)$/;"	f	class:COneNetPlatAuth
PackFcsMessage	src/MqttParseFormat.cpp	/^int CMqttFormatParse::PackFcsMessage(const vector<FORMAT>& storeData, const Json::Value& function, const string topic)$/;"	f	class:CMqttFormatParse
PackJsonFormat	src/MqttPackFormat.cpp	/^int CMqttPackFormat::PackJsonFormat(vector<ITEM_FORMAT>& storeObj, const vector<FORMAT>& storeFormat, const vector<FORMAT> &storePayloadErrors)$/;"	f	class:CMqttPackFormat
PackJsonFormat	src/MqttParseFormat.cpp	/^int CMqttFormatParse::PackJsonFormat(vector<ITEM_FORMAT>& storeObj, const vector<FORMAT>& storeFormat)$/;"	f	class:CMqttFormatParse
PackServerMessage	src/MqttPackFormat.cpp	/^int CMqttPackFormat::PackServerMessage(const vector<ITEM_FORMAT> &storeData, const Json::Value &topic, const Json::Value &items) $/;"	f	class:CMqttPackFormat
PackServerMessageRecursion	src/MqttPackFormat.cpp	/^int CMqttPackFormat::PackServerMessageRecursion(Json::Value &root, vector<ITEM_FORMAT>::const_iterator &itr_begin, vector<ITEM_FORMAT>::const_iterator &itr_end, bool flag)$/;"	f	class:CMqttPackFormat
ParseJsonFormat	src/MqttParseFormat.cpp	/^void CMqttFormatParse::ParseJsonFormat(vector<FORMAT>& store_format, const Json::Value & format)$/;"	f	class:CMqttFormatParse
PictureToBase64	include/MqttPictureToBase64.h	/^class PictureToBase64$/;"	c
PubDefaultAttributeToFcs	src/MqttParseFormat.cpp	/^int CMqttFormatParse::PubDefaultAttributeToFcs()$/;"	f	class:CMqttFormatParse
PubDefaultAttributeToFcsEnableMessagePost	src/MqttParseFormat.cpp	/^int CMqttFormatParse::PubDefaultAttributeToFcsEnableMessagePost()$/;"	f	class:CMqttFormatParse
PubDefaultAttributeToFcsSetPostWay	src/MqttParseFormat.cpp	/^int CMqttFormatParse::PubDefaultAttributeToFcsSetPostWay(set<string> &storeAlarmItemId)$/;"	f	class:CMqttFormatParse
PubDefaultAttributeToFcsSubItems	src/MqttParseFormat.cpp	/^int CMqttFormatParse::PubDefaultAttributeToFcsSubItems(set<string> &storeItemId, set<string> &storeAlarmItemId)$/;"	f	class:CMqttFormatParse
PublishMessage	src/MqttConnectServer.cpp	/^int CMqttService::PublishMessage(string &out, char *topic, bool online)$/;"	f	class:CMqttService
PublishMqueueMessage	src/MqttParseFormat.cpp	/^int CMqttFormatParse::PublishMqueueMessage(char *out)$/;"	f	class:CMqttFormatParse
Qos0	include/MqttInitConfig.h	15;"	d
Qos1	include/MqttInitConfig.h	16;"	d
Qos2	include/MqttInitConfig.h	17;"	d
RED	include/GlogInit.h	14;"	d
RELATE_NAME	include/MqttParseFormat.h	/^	RELATE_NAME,                        \/**<The attri's relate name that made in flexem *\/$/;"	e	enum:ITEM_ATTRI_TYPE
RESET	include/GlogInit.h	12;"	d
ReadFileIntoString	src/MqttPictureToBase64.cpp	/^string PictureToBase64::ReadFileIntoString(const char *filename)$/;"	f	class:PictureToBase64
ReorgnizeFcsMessage	src/MqttPackFormat.cpp	/^void CMqttPackFormat::ReorgnizeFcsMessage(const Json::Value &root, const Json::Value &payload)$/;"	f	class:CMqttPackFormat
ReorgnizeMqttMessage	src/MqttParseFormat.cpp	/^void CMqttFormatParse::ReorgnizeMqttMessage(const Json::Value & root, const Json::Value & payload, const string topic)$/;"	f	class:CMqttFormatParse
ReturnInfo	include/GlogInit.h	/^enum ReturnInfo {$/;"	g
SERVERINFO_INITIALIZER	include/MqttInitConfig.h	30;"	d
STRING_HIGH_BIT	include/MqttParseFormat.h	/^	STRING_HIGH_BIT,                    \/**<The string bit type *\/$/;"	e	enum:ITEM_ATTRI_TYPE
STRING_NUMBER	include/MqttParseFormat.h	/^	STRING_NUMBER,                      \/**<The string number *\/$/;"	e	enum:ITEM_ATTRI_TYPE
STRING_TYPE	include/MqttParseFormat.h	/^	STRING_TYPE,                        \/**<The string type coding eg: 'unicode' or 'ASCII' *\/$/;"	e	enum:ITEM_ATTRI_TYPE
SUCCESS	include/GlogInit.h	/^	SUCCESS = 0$/;"	e	enum:ReturnInfo
SeverityLevel	include/GlogInit.h	/^enum SeverityLevel {$/;"	g
SslErrorCb	src/MqttConnectServer.cpp	/^int CMqttService::SslErrorCb(const char *str, size_t len, void *u)$/;"	f	class:CMqttService
TCP_TO_FCS_NAME	include/MQAdapter.h	17;"	d
USE_NAME	include/MqttParseFormat.h	/^	USE_NAME,                           \/**<The attri's using name that made in usrer *\/$/;"	e	enum:ITEM_ATTRI_TYPE
VALUE	include/MqttParseFormat.h	/^	VALUE,                              \/**<The item's or attri's type eg:'int', 'string','double' and so on *\/$/;"	e	enum:ITEM_ATTRI_TYPE
WHITE	include/GlogInit.h	20;"	d
YELLOW	include/GlogInit.h	16;"	d
_GET_PARAM	include/MqttGetFcsParam.h	/^	typedef struct _GET_PARAM {$/;"	s
__ALI_PLAT_AUTH__	include/AliPlatAuth.h	34;"	d
__GLOG_H__	include/GlogInit.h	8;"	d
__HUAWEI_PLAT_AUTH__	include/HuaWeiPlatAuth.h	34;"	d
__MQTT_CONNECT_CONFIG___	include/MqttInitConfig.h	8;"	d
__MQTT_ENCRYPTDATA__	include/MqttEncryptData.h	34;"	d
__MQTT_FUNC_H__	include/MqttConnectServer.h	8;"	d
__MQTT_GET_FCS_PARAM__	include/MqttGetFcsParam.h	35;"	d
__MQTT_MESSAGE_MAP__	include/MqttMessageMap.h	35;"	d
__MQTT_PACK_FORMAT__	include/MqttPackFormat.h	8;"	d
__MQTT_PARSE_FORMAT__	include/MqttParseFormat.h	8;"	d
__MQTT_PICTURE_TO_BASE64__	include/MqttPictureToBase64.h	8;"	d
__ONENET_PLAT_AUTH__	include/OneNetPlatAuth.h	34;"	d
_online	include/MqttPackFormat.h	/^		bool _online;$/;"	m	class:CMqttPackFormat
_reSubcribe	include/MqttParseFormat.h	/^        bool _reSubcribe;$/;"	m	class:CMqttFormatParse
_topic_to_message_id	include/MqttParseFormat.h	/^        bool _topic_to_message_id;$/;"	m	class:CMqttFormatParse
b_bool	include/MqttParseFormat.h	/^		bool     b_bool;                \/**< The value type of boolean *\/$/;"	m	class:JSON_TYPE
client	src/MqttConnectServer.cpp	/^MQTTAsync client = NULL;$/;"	v
clientId	include/MqttInitConfig.h	/^	string clientId;               \/**< Client ID *\/$/;"	m	class:MqttConfigInfoType
configName	include/MqttInitConfig.h	/^	string configName;             \/**< The name of the protocol *\/$/;"	m	class:MqttConfigInfoType
connectType	include/MqttInitConfig.h	/^	string connectType;            \/**< Connect type("raw_tcp", "secure_tcp", "websocket") *\/$/;"	m	class:MqttConfigInfoType
connect_service	src/MqttStart.cpp	/^CMqttService connect_service;$/;"	v
d_double	include/MqttParseFormat.h	/^		double   d_double;              \/**< The value type of double *\/$/;"	m	class:JSON_TYPE
fbox_sn	include/MqttGetFcsParam.h	/^		string fbox_sn;$/;"	m	struct:_GET_PARAM
format_parse	src/MqttStart.cpp	/^CMqttFormatParse format_parse;$/;"	v
g_function_config	src/MqttInitConfig.cpp	/^Json::Value g_function_config = Json::nullValue;$/;"	v
g_topic_list	src/MqttInitConfig.cpp	/^vector<string> g_topic_list;$/;"	v
gy_mqtt_uuid	include/MqttParseFormat.h	/^		long long gy_mqtt_uuid;$/;"	m	class:CMqttFormatParse
i_int	include/MqttParseFormat.h	/^		long long i_int;                 \/**< The value type of integer *\/$/;"	m	class:JSON_TYPE
init_mqtt_config	src/MqttStart.cpp	/^MqttInitConfig init_mqtt_config;$/;"	v
item_attri	include/MqttParseFormat.h	/^		FORMAT item_attri[13];          \/**< The value is represent a item include six necessary attriture *\/$/;"	m	class:ITEM_FORMAT
item_attri	include/MqttParseFormat.h	/^		string    item_attri;           \/**< The key_value type if item or attri *\/$/;"	m	class:FORMAT
json_name	include/MqttParseFormat.h	/^		string    json_name;            \/**< The name of json object *\/$/;"	m	class:FORMAT
json_size	include/MqttParseFormat.h	/^		uint32_t  json_size;            \/**< The number of json object members *\/$/;"	m	class:FORMAT
json_type	include/MqttParseFormat.h	/^		uint32_t  json_type;            \/**< The type of json object *\/$/;"	m	class:FORMAT
json_value	include/MqttParseFormat.h	/^		JSON_TYPE json_value;           \/**< The value of json object *\/$/;"	m	class:FORMAT
keepAlive	include/MqttInitConfig.h	/^	uint32_t keepAlive;            \/**< Hold connection time *\/$/;"	m	class:MqttConfigInfoType
main	src/MqttStart.cpp	/^int main(int argc, const char *argv[])$/;"	f
message_id_int	include/MqttParseFormat.h	/^		long long message_id_int;$/;"	m	class:CMqttFormatParse
message_id_str	include/MqttParseFormat.h	/^		string message_id_str;$/;"	m	class:CMqttFormatParse
message_map	include/MqttMessageMap.h	/^		map<int, string> message_map;$/;"	m	class:CMqttMessageMap
mq_id_	include/MQAdapter.h	/^    mqd_t mq_id_;$/;"	m	class:MqAdapter
mq_max_msg_num_	include/MQAdapter.h	/^    long mq_max_msg_num_;$/;"	m	class:MqAdapter
mq_msg_size_	include/MQAdapter.h	/^    long mq_msg_size_;$/;"	m	class:MqAdapter
mqttVersion	include/MqttInitConfig.h	/^	string mqttVersion;            \/**< MQTT protocol version("3.1", "3.1.1" and "5.0") *\/$/;"	m	class:MqttConfigInfoType
mqttconfig_path	include/MqttGetFcsParam.h	/^		string mqttconfig_path;$/;"	m	struct:_GET_PARAM
name_	include/MQAdapter.h	/^    string name_;$/;"	m	class:MqAdapter
object	include/MqttParseFormat.h	/^		FORMAT object;                  \/**< The value is represent a attri of item *\/$/;"	m	class:ITEM_FORMAT
offlineCaching	include/MqttInitConfig.h	/^	bool offlineCaching;           \/**< Enbled offlineCaching *\/$/;"	m	class:MqttConfigInfoType
p_mq_ptr	include/MqttParseFormat.h	/^		MqAdapter *p_mq_ptr;$/;"	m	class:CMqttFormatParse
pack_format	src/MqttStart.cpp	/^CMqttPackFormat pack_format;$/;"	v
passWord	include/MqttInitConfig.h	/^	string passWord;               \/**< passWord for authentication *\/$/;"	m	class:MqttConfigInfoType
payload_format	include/MqttParseFormat.h	/^		bool payload_format;$/;"	m	class:CMqttFormatParse
platform	include/MqttInitConfig.h	/^	string platform;               \/**< Supported cloud platform *\/$/;"	m	class:MqttConfigInfoType
pub_interval	include/MqttInitConfig.h	/^	uint32_t pub_interval;         \/**< Item publish interval*\/$/;"	m	class:MqttConfigInfoType
pub_mode	include/MqttInitConfig.h	/^	string pub_mode;               \/**< Item publish mode*\/$/;"	m	class:MqttConfigInfoType
pub_sub_status	include/MqttParseFormat.h	/^		string pub_sub_status;  \/**< Prevent subscribing to your own published message*\/$/;"	m	class:CMqttFormatParse
s_string	include/MqttParseFormat.h	/^		string   s_string;              \/**< The value type of string *\/$/;"	m	class:JSON_TYPE
serverPort	include/MqttInitConfig.h	/^	uint32_t serverPort;           \/**< Server port number *\/$/;"	m	class:MqttConfigInfoType
serverUrl	include/MqttInitConfig.h	/^	string serverUrl;              \/**< Server IP address *\/$/;"	m	class:MqttConfigInfoType
sn	include/MqttInitConfig.h	/^		string sn;$/;"	m	class:MqttInitConfig
start_mqtt_flag	src/MqttStart.cpp	/^static int start_mqtt_flag = 0;$/;"	v	file:
store	include/MqttInitConfig.h	/^	string store;                  \/**< Caching file location("local", "sd" "usb") *\/$/;"	m	class:MqttConfigInfoType
u_uint	include/MqttParseFormat.h	/^		long long u_uint;                \/**< The value type of unsigned integer *\/$/;"	m	class:JSON_TYPE
userName	include/MqttInitConfig.h	/^	string userName;               \/**< Username for authentication *\/$/;"	m	class:MqttConfigInfoType
withAuthen	include/MqttInitConfig.h	/^	bool withAuthen;               \/**< Authentication flag *\/$/;"	m	class:MqttConfigInfoType
~CMqttFormatParse	src/MqttParseFormat.cpp	/^CMqttFormatParse::~CMqttFormatParse()$/;"	f	class:CMqttFormatParse
~CMqttMessageMap	src/MqttMessageMap.cpp	/^CMqttMessageMap::~CMqttMessageMap()$/;"	f	class:CMqttMessageMap
~CMqttPackFormat	src/MqttPackFormat.cpp	/^CMqttPackFormat::~CMqttPackFormat()$/;"	f	class:CMqttPackFormat
~CMqttService	src/MqttConnectServer.cpp	/^CMqttService::~CMqttService()$/;"	f	class:CMqttService
~COneNetPlatAuth	src/OneNetPlatAuth.cpp	/^COneNetPlatAuth::~COneNetPlatAuth()$/;"	f	class:COneNetPlatAuth
~MqAdapter	src/MQAdapter.cpp	/^MqAdapter::~MqAdapter() {$/;"	f	class:MqAdapter
~MqttInitConfig	src/MqttInitConfig.cpp	/^MqttInitConfig::~MqttInitConfig()$/;"	f	class:MqttInitConfig
